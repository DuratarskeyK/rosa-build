= render :partial => 'projects/submenu'

= form_tag project_collaborators_path(@project), :id => 'members_form' do
  = hidden_field_tag "_method", "post"
  %table.tablesorter{:cellpadding => "0", :cellspacing => "0"}
    %thead
      %tr
        %th
          \ 
        %th
          Участники
        %th{:colspan => "3"}
          Роли
    %tbody
      - @users.each do |user|
        %tr#admin-table-members-row1
          %td
            %span#niceCheckbox1.niceCheck-main{:onclick => "changeCheck(this)", :style => "background-position: 0px 0px; "}
              = check_box_tag "user_remove[#{user.id}][]"
              -#%input#niceCheckbox1-1{:name => "ch2", :type => "checkbox"}/
          %td
            .img
              = image_tag(gravatar_url(user.email))
            .forimg= link_to user.name, user_path(user)
          - Relation::ROLES.each_with_index do |role, i|
            %td
              .radio
                = radio_button_tag "user[#{user.id}]", role, ((@project.relations.exists? :object_id => user.id, :object_type => 'User', :role => role) ? :checked : nil), :class => 'niceRadio'
                -# f.radio_button "group[#{role}][#{group.id}]", '1', ((@project.relations.exists? :object_id => group.id, :object_type => 'Group', :role => role) ? :checked : nil)
                -#%span.niceRadio.radioChecked
                -#  %input#myradio1{:checked => "checked", :name => "myradio", :tabindex => "1", :type => "radio", :value => "on"}/
              .forradio= role
  %a.button{:href => "#", :onclick => "deleteAdminMember();"} Удалить
  .both
.hr.top
= form_tag add_project_collaborators_path(@project) do
  .admin-search
    = autocomplete_field_tag 'member_id', params[:member_id], autocomplete_user_uname_users_path, :id_element => '#member_id_field'
  .admin-role
    .lineForm
      = select_tag 'role', options_for_select(Relation::ROLES)
  .both
  -#.admin-search
  -#  = label_tag "group_uname", t("layout.collaborators.input_groupname")
  -#  = autocomplete_field_tag 'group_id', params[:group_id], autocomplete_group_uname_groups_path, :id_element => '#group_id_field'
  = hidden_field_tag 'member_id', nil, :id => 'member_id_field'
  =# hidden_field_tag 'group_id', nil, :id => 'group_id_field'
  %br
  = submit_tag t("layout.add"), :class => 'button'

.hr.bottom
.both
=# submit_tag t("layout.save"), :class => 'button'
%a.button{:href => "#", :onclick => "saveAdminMember();"}=t("layout.save")

:javascript
  function saveAdminMember() {
    $('#_method').attr('value', 'post');
    $('form#members_form').submit();
  }

  function deleteAdminMember() {
    $('#_method').attr('value', 'delete');
    $('form#members_form').attr('action', '#{ remove_project_collaborators_path(@project) }');
    $('form#members_form').submit();
  }

-#= form_tag add_project_collaborators_path(@project) do
-#  .group
-#    .admin-search
-#      -#%input.gray{:onblur => "if(this.value==''){this.value='Найти участника...';this.className='gray';}", :onclick => "if(this.value=='Найти участника...'){this.value='';this.className='black';}", :type => "text", :value => "Найти участника..."}
-#      = autocomplete_field_tag 'group_id', params[:group_id], autocomplete_group_uname_groups_path, :id_element => '#group_id_field'
-#    .admin-add
-#      %a.button{:href => "#"} Добавить
-#    .both


-#= form_tag add_project_collaborators_path(@project) do
-#  .group
-#    %h2.title= t("layout.collaborators.add")
-#    = label_tag "member_uname", t("layout.collaborators.input_username")
-#    = autocomplete_field_tag 'member_id', params[:member_id], autocomplete_user_uname_users_path, :id_element => '#member_id_field'
-#    &nbsp;
-#    = t('layout.or')
-#    &nbsp;
-#    = label_tag "group_uname", t("layout.collaborators.input_groupname")
-#    = autocomplete_field_tag 'group_id', params[:group_id], autocomplete_group_uname_groups_path, :id_element => '#group_id_field'
-#
-#    = hidden_field_tag 'member_id', nil, :id => 'member_id_field'
-#    = hidden_field_tag 'group_id', nil, :id => 'group_id_field'
-#  %br
-#  .group.navform.wat-cf
-#    %button.button{:type => "submit"}
-#      = image_tag("choose.png", :alt => t("layout.add"))
-#      = t("layout.add")

-#= form_tag project_collaborators_path(@project) do
-#  %h2.title= t("layout.users.list_header")
-#  %table.table
-#    %tr
-#      %th.first ID
-#      %th= t("activerecord.attributes.user.name")
-#      %th= t("activerecord.attributes.user.roles")
-#      %th= t("activerecord.attributes.user.uname")
-#    - #TODO: Replace this Chelyabinsk add/remove collaborators method by more human method
-#    - @users.each do |user|
-#      %tr{:class => cycle("odd", "even")}
-#        %td
-#          = user.id
-#        %td
-#          = link_to user.name, user_path(user)
-#        %td
-#          - Relation::ROLES.each do |role|
-#            = check_box_tag "user[#{ role }][#{user.id}]", '1', ((@project.relations.exists? :object_id => user.id, :object_type => 'User', :role => role) ? :checked : nil), {:class => "user_role_chbx"}
-#            = label_tag "user[#{ role }][#{user.id}]", t("layout.collaborators.roles.#{ role }")
-#        %td
-#          = user.uname
-#  %h2.title= t("layout.groups.list_header")
-#  %table.table
-#    %tr
-#      %th.first ID
-#      %th= t("activerecord.attributes.group.name")
-#      %th= t("activerecord.attributes.group.roles")
-#      %th= t("activerecord.attributes.group.uname")
-#    - @groups.each do |group|
-#      %tr{:class => cycle("odd", "even")}
-#        %td
-#          = group.id
-#        %td
-#          = link_to group.name, group_path(group)
-#        %td
-#          - Relation::ROLES.each do |role|
-#            = check_box_tag "group[#{role}][#{group.id}]", '1', ((@project.relations.exists? :object_id => group.id, :object_type => 'Group', :role => role) ? :checked : nil), {:class => "user_role_chbx"}
-#            = label_tag "group[#{role}][#{group.id}]", t("layout.collaborators.roles.#{role}")
-#        %td
-#          = group.uname
-#  .group.navform.wat-cf
-#    %button.button{:type => "submit"}
-#      = image_tag("choose.png", :alt => t("layout.save"))
-#      = t("layout.save")
-#    %span.text_button_padding= t("layout.or")
-#    = link_to t("layout.cancel"), project_path(@project), :class => "text_button_padding link_button"

- content_for :sidebar, render('projects/sidebar')
