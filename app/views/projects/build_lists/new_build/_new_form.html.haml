= form_for [@project, @build_list], html: { class: :form, method: :post } do |f|
  .row
    .col-md-4.col-md-offset-2
      = render 'projects/build_lists/new_build/include_repos'

    .col-md-4
      %h4= t 'activerecord.attributes.build_list.save_to_repository'
      %select.form-control.boffset20{ 'ng-model' => 'newBuildCtrl.save_to_repository',
        'ng-options' => 'r.name for r in newBuildCtrl.save_to_repositories track by r.id',
        'ng-change' =>  'newBuildCtrl.selectSaveToRepository()',
        name:           'build_list[save_to_repository_id]' }

      %h4= t 'activerecord.attributes.build_list.project_version'
      %select.form-control.boffset20{ 'ng-model' => 'newBuildCtrl.project_version',
        'ng-options' => 'v.name group by v.kind for v in newBuildCtrl.project_versions track by v.name',
        'ng-change' =>  'newBuildCtrl.selectProjectVersion()',
        'ng-value' =>   'newBuildCtrl.project_version',
        name:           'build_list[project_version]' }

      %h4= t 'activerecord.attributes.build_list.arch'
      .checkbox{ 'ng-repeat' => 'arch in newBuildCtrl.arches' }
        %label
          %input{ type:         'checkbox',
                  'ng-model' => 'arch.checked',
                  'ng-value' => 'arch.id',
                  name:         'arches[]' }
          {{ arch.name }}

      %h4.offset20= t 'activerecord.attributes.build_list.update_type'
      - selected = params[:build_list].try(:[], :update_type) ? {selected: params[:build_list][:update_type]} : {}
      = f.select :update_type, BuildList::UPDATE_TYPES, selected, class: 'form-control boffset20'

      = render 'projects/build_lists/new_build/autocomplete_form',
               field:       :ExtraRepositories,
               placeholder: 'uxteam_personal'

      = render 'projects/build_lists/new_build/autocomplete_form',
               field:       :ExtraBuildLists,
               placeholder: '1000000'

      = render 'projects/build_lists/new_build/extra_params_and_preferences',
               params: params,
               f:      f

      = hidden_field_tag :from_build_list_id, params[:build_list_id] if params[:build_list_id].present?
      = f.submit t('layout.projects.build_button'),
          data: {'disable-with' => t('layout.processing')},
          class: 'btn btn-primary'

- content_for :additional_scripts do
  = render 'projects/build_lists/new_build/init_service.js.erb'

-#
  %section.left
    %h3= t("activerecord.attributes.build_list.build_for_platform")
    .all_platforms
      - availables_main_platforms.each do |pl|
        .both
          %div{id: "build_for_pl_#{pl.id}", class: 'build_for_pl'}= pl.name
          .offset25= render 'include_repos', platform: pl
  %section.right
    %h3= t('activerecord.attributes.build_list.save_to_repository')
    - select_options = save_to_repositories(project)
    - selected = selected_save_to_repositories(project, select_options, params)
    .lineForm= f.select :save_to_repository_id, select_options, selected
    %h3= t("activerecord.attributes.build_list.project_version")
    .lineForm= f.select :project_version, versions_for_group_select(project), selected: params[:build_list].try(:[], :project_version) || project.default_branch
    %h3= t("activerecord.attributes.build_list.arch")
    - Arch.recent.each do |arch|
      .both
        - checked = (params[:arches]||[]).include?(arch.id.to_s) || (params[:arches].blank? && controller.action_name == 'new' && Arch::DEFAULT.include?(arch.name))
        = check_box_tag "arches[]", arch.id, checked, id: "arches_#{arch.id}"
        = label_tag "arches_#{arch.id}", arch.name
    %h3= t('activerecord.attributes.build_list.update_type')
    - selected = params[:build_list].try(:[], :update_type) ? {selected: params[:build_list][:update_type]} : {}
    .lineForm= f.select :update_type, BuildList::UPDATE_TYPES, selected

    = render 'shared/autocomplete_form',
      field:             :extra_repositories,
      field_class:       Repository,
      placeholder:       'uxteam_personal',
      subject:           @build_list,
      autocomplete_path: autocomplete_extra_repositories_autocompletes_path,
      default_values:    project.repositories.select{ |r| r.platform.personal? }
    = render 'shared/autocomplete_form',
      field:             :extra_build_lists,
      field_class:       BuildList,
      placeholder:       '1000000',
      subject:           build_list,
      autocomplete_path: autocomplete_extra_build_list_autocompletes_path

    %h3= t('activerecord.attributes.build_list.extra_params.label')
    - BuildList::EXTRA_PARAMS.each do |field|
      - text = params[:build_list].try(:[], :extra_params).try(:[], field)
      = text_field_tag "build_list[extra_params][#{field}]", text, placeholder: t("activerecord.attributes.build_list.extra_params.#{field}"), class: 'full-size'
      .both

    %h3= t("activerecord.attributes.build_list.preferences")
    - selected = params[:build_list].try(:[], :auto_publish_status) ? {selected: params[:build_list][:auto_publish_status]} : {}
    = f.select :auto_publish_status, auto_publish_statuses, selected
    = f.label :auto_publish_status
    - %i(auto_create_container include_testing_subrepository use_cached_chroot use_extra_tests save_buildroot).each do |kind|
      .both
        - checked = params[:build_list].try(:[], kind)
        - checked = @build_list.send(kind) if checked.nil?
        = f.check_box kind, checked: checked
        = f.label kind
    .both
    - selected = params[:build_list].try(:[], :external_nodes) ? {selected: params[:build_list][:external_nodes]} : {}
    = f.select :external_nodes, external_nodes, selected.merge(include_blank: true)
    = f.label :external_nodes
    .both

    %br
    = hidden_field_tag :from_build_list_id, params[:build_list_id] if params[:build_list_id].present?
    = f.submit t('layout.projects.build_button'), data: {'disable-with' => t('layout.processing')}

    - if params[:build_list_id].blank?
      :javascript
        $(function() {
          $('#build_list_save_to_repository_id').trigger('change');
        });

.both
