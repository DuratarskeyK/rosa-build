%tr{:id => "row#{build_list_counter}", :class => "#{build_list_status_color(build_list.status)}"}
  %td= [link_to(build_list.id, build_list),
    (link_to(t('layout.clone'), new_project_build_list_path(build_list.project,
    :build_list_id => build_list.id)) if can?(:create, build_list))].compact.join('<br/>').html_safe
  %td
    = build_list.human_status
    %br
    - if BuildList::HUMAN_STATUSES[build_list.status].in? [:build_pending, :build_started, :build_publish]
      %time.js-relative-date{:datetime => build_list.updated_at.strftime("%FT%T%:z"), :title => build_list.updated_at.strftime("%F %T")}
        = build_list.updated_at.strftime "%F %T"
      - if build_list.build_started? && (build_list.average_build_time > 0)
        \/
        %time
          = build_list.formatted_average_build_time
  - if build_list.project.present?
    %td= link_to build_list.project.name_with_owner, build_list.project
    %td= build_list_version_link(build_list)
  - else
    %td.centered{:colspan => 2}= t("layout.projects.unexisted_project")
  %td= get_version_release build_list
  -build_for=" (#{build_list.build_for_platform.name})" if build_list.build_for_platform && build_list.save_to_platform.personal?
  %td= link_to "#{build_list.save_to_platform.name}/#{build_list.save_to_repository.name}#{build_for}", [build_list.save_to_platform, build_list.save_to_repository]
  %td= build_list.arch.try(:name) || t("layout.arches.unexisted_arch")
  %td= link_to build_list.user.try(:fullname), build_list.user
  %td= build_list.updated_at.strftime('%d/%m/%Y')
