= form_for [@project, @build_list], html: { class: 'form', method: :post } do |f|
  .row
    .col-md-4.col-md-offset-2
      %h3= t 'activerecord.attributes.build_list.build_for_platform'
      .all_platforms
        - availables_main_platforms.each do |pl|
          .clearfix
            %h4{id: "build_for_pl_#{pl.id}", class: 'build_for_pl'}= pl.name
            = render 'include_repos', platform: pl
    .col-md-5
      %h3= t 'activerecord.attributes.build_list.save_to_repository'
      - selected = params[:build_list].try(:[], :save_to_repository_id) ? {selected: params[:build_list][:save_to_repository_id]} : {}
      = f.select :save_to_repository_id, save_to_repositories(project), selected, class: 'form-control'
      %h3= t 'activerecord.attributes.build_list.project_version'
      = f.select :project_version, versions_for_group_select(project), {selected: params[:build_list].try(:[], :project_version) || project.default_branch}, class: 'form-control'
      %h3= t 'activerecord.attributes.build_list.arch'
      - Arch.recent.each do |arch|
        - checked = (params[:arches]||[]).include?(arch.id.to_s) || (params[:arches].blank? && controller.action_name == 'new' && Arch::DEFAULT.include?(arch.name))
        .checkbox
          %label{ for: "arches_#{arch.id}" }
            = check_box_tag "arches[]", arch.id, checked, id: "arches_#{arch.id}"
            = arch.name

      %h3= t 'activerecord.attributes.build_list.update_type'
      - selected = params[:build_list].try(:[], :update_type) ? {selected: params[:build_list][:update_type]} : {}
      = f.select :update_type, BuildList::UPDATE_TYPES, selected, class: 'form-control'

      = render 'shared/autocomplete_form',
        field:             :extra_repositories,
        field_class:       Repository,
        placeholder:       'uxteam_personal',
        subject:           @build_list,
        autocomplete_path: autocomplete_extra_repositories_autocompletes_path,
        default_values:    project.repositories.select{ |r| r.platform.personal? }
      = render 'shared/autocomplete_form',
        field:             :extra_build_lists,
        field_class:       BuildList,
        placeholder:       '1000000',
        subject:           build_list,
        autocomplete_path: autocomplete_extra_build_list_autocompletes_path

      %h3= t 'activerecord.attributes.build_list.extra_params.label'
      - BuildList::EXTRA_PARAMS.each do |field|
        - text = params[:build_list].try(:[], :extra_params).try(:[], field)
        .form-group
          = text_field_tag "build_list[extra_params][#{field}]", text,
            placeholder: t("activerecord.attributes.build_list.extra_params.#{field}"), class: 'form-control'

      %h3= t 'activerecord.attributes.build_list.preferences'
      .row
        = f.label :auto_publish_status, class: 'col-xs-6'
        = f.label :external_nodes, class: 'col-xs-6'
        .clearfix
        - selected = params[:build_list].try(:[], :auto_publish_status) ? {selected: params[:build_list][:auto_publish_status]} : {}
        .col-xs-6
          = f.select :auto_publish_status, auto_publish_statuses, selected, class: 'form-control'
        .col-xs-6
          - selected = params[:build_list].try(:[], :external_nodes) ? {selected: params[:build_list][:external_nodes]} : {}
          = f.select :external_nodes, external_nodes, selected.merge(include_blank: true), class: 'form-control'

      - %i(auto_create_container include_testing_subrepository use_cached_chroot use_extra_tests).each do |kind|
        .checkbox
          %label{ for: kind }
            - checked = params[:build_list].try(:[], kind)
            - checked = @build_list.send(kind) if checked.nil?
            = f.check_box kind, checked: checked
            = BuildList.human_attribute_name kind

      = hidden_field_tag :from_build_list_id, params[:build_list_id] if params[:build_list_id].present?
      = f.submit t('layout.projects.build_button'), data: {'disable-with' => t('layout.processing')},
                 class: 'btn btn-primary'
