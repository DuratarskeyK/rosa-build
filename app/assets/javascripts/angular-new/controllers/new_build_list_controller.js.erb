RosaABF.controller('NewBuildListController', ['$scope', '$http', '$timeout',
                   function($scope, $http, $timeout) {

  $scope.save_to_repository  = null;
  $scope.build_for_platform  = null;

  var save_to_repository_id  = $('#build_list_save_to_repository_id');
  var all_repositories       = $('.all_platforms input');
  var auto_create_container  = $('#build_list_auto_create_container');
  var extra_repos            = $('.autocomplete-form.extra_repositories');
  var build_list_auto_publish_status = $('#build_list_auto_publish_status');
  var bl_version_sel         = $('#build_list_project_version');
  var all_platforms_name     = $('h4.build_for_pl');

  $scope.change_save_to_repository = function() {

    var selected_option = save_to_repository_id.find("option:selected");
    var platform_id = selected_option.attr('platform_id');
    var rep_name = selected_option.text().match(/[\w-]+\/([\w-]+)/)[1];

    var build_platform = $('#build_for_pl_' + platform_id);

    all_repositories.removeAttr('checked');

    updateExtraReposAndBuildLists(platform_id);
    updatedDefaultArches(selected_option);
    $('.autocomplete-form table tbody').empty();
    if (build_platform.size() == 0) {
      all_repositories.removeAttr('disabled');
      all_platforms_name.removeClass('text-muted');
      auto_create_container.removeAttr('checked');
      addPersonalPlatformToExtraRepos(selected_option, extra_repos);
      extra_repos.show();
    } else {
      all_repositories.attr('disabled', 'disabled');
      all_platforms_name.addClass('text-muted');
      build_platform.removeClass('text-muted');
      extra_repos.hide();
      var parent = build_platform.parent();
      parent.find('input').removeAttr('disabled');
      parent.find('input[rep_name="main"]').attr('checked', 'checked');
      if (rep_name != 'main') {
        parent.find('input[rep_name="' + rep_name + '"]').attr('checked', 'checked');
      }
      setBranchSelected(selected_option);
    }

    if (selected_option.attr('publish_without_qa') == '1') {
      build_list_auto_publish_status.removeAttr('disabled').val('default');
    } else {
      build_list_auto_publish_status.val('none').attr('disabled', 'disabled');
      auto_create_container.attr('checked', 'checked');
    }
  }

  function updatedDefaultArches(selected_option) {
    $('input[name="arches[]"]').removeAttr('checked');
    _.each(selected_option.attr('default_arches').split(' '), function(id){
      $('#arches_' + id).attr('checked', 'checked');
    });
  }

  function updateExtraReposAndBuildLists(save_to_platform_id) {
    $.each($('.autocomplete-form'), function() {
      var form = $(this);
      var path = form.attr('path') + '?platform_id=' + save_to_platform_id;
      form.find('.autocomplete').attr('data-autocomplete', path);
    });
  }

  function addPersonalPlatformToExtraRepos(selected_option, extra_repos) {
    var default_value = extra_repos.find('div[label="' + selected_option.text() + '"]');
    if (default_value.length == 0) { return; }
    addDataToAutocompleteForm(
      extra_repos,
      default_value.attr('path'),
      default_value.attr('label'),
      default_value.attr('name'),
      default_value.attr('value')
    );
  }

  function setBranchSelected(selected_option) {
    var pl_name = selected_option.text().match(/([\w-.]+)\/[\w-.]+/)[1];

    var branch_pl_opt = bl_version_sel.find('option[value="' + pl_name + '"]');
    // If there is branch we need - set it selected:
    if (branch_pl_opt.size() > 0) {
      bl_version_sel.find('option[selected]').removeAttr('selected');
      branch_pl_opt.attr('selected', 'selected');
      bl_version_sel.val(branch_pl_opt);
      // hack for FF to force render of select box.
      bl_version_sel[0].innerHTML = bl_version_sel[0].innerHTML;
    }
  }
}]);
