#! /usr/bin/env ruby

app_name = ENV['APP_NAME'] || 'rosa_build'
Bluepill.application(app_name, :log_file => "/srv/rosa_build/shared/log/bluepill.log") do |app|
  app.uid = app.gid = 'rosa'
  app.working_dir = "/srv/#{app_name}/current"

  app.process("resque") do |process|
    process.group = "resque"
    pid_path = File.join(app.working_dir, 'tmp', 'pids', 'resque.pid')
    process.start_command = "bundle exec rake resque:work QUEUE=fork_import,hook,clone_build,notification PIDFILE=#{ pid_path } BACKGROUND=yes"
    process.pid_file = pid_path
    process.stop_command = "kill -QUIT {{PID}}"
    process.daemonize = true
    process.start_grace_time = 5.seconds
    process.stop_grace_time = 5.seconds
    process.restart_grace_time = 5.seconds

    #process.monitor_children do |c|
    #  c.stop_command = "kill -USR1 {{PID}}" # TODO: Are we really need this?
    #  c.checks :mem_usage, :every => 30.seconds, :below => 80.megabytes, :fires => :stop
    #  c.checks :running_time, :every => 30.seconds, :below => 10.minutes, :fires => :stop
    #end
  end

  #app.process("newrelic") do |process|
  #  process.start_grace_time    = 10.seconds
  #  process.stop_grace_time     = 10.seconds
  #  process.restart_grace_time  = 10.seconds

  #  path = File.join(app.working_dir, 'tmp', 'pids', 'newrelic.pid')
  #  process.start_command = "/usr/bin/env /usr/local/bin/nrsysmond -c /etc/newrelic/nrsysmond.cfg -p #{path}"
  #  process.pid_file = path
  #end

  #app.process("unicorn") do |process|
  #  process.start_grace_time = 8.seconds
  #  process.stop_grace_time = 5.seconds
  #  process.restart_grace_time = 13.seconds

  #  process.start_command = "bundle exec unicorn -l /tmp/#{app_name}_unicorn.sock -E production -c config/unicorn.rb -D"
  #  process.stop_command = "kill -QUIT {{PID}}"
  #  process.restart_command = "kill -USR2 {{PID}}"
  #  process.pid_file = File.join(app.working_dir, 'tmp', 'pids', 'unicorn.pid')

  #  process.monitor_children do |child_process|
  #    child_process.stop_command = "kill -QUIT {{PID}}"

  #    child_process.checks :mem_usage, :every => 10.seconds, :below => 150.megabytes, :times => [3,4], :fires => :stop
  #    child_process.checks :cpu_usage, :every => 10.seconds, :below => 20, :times => [3,4], :fires => :stop
  #  end
  #end
end
